- when: inventory_hostname == k8s_initializer
  block:
    - name: Initialize K8s cluster
      vars:
        k8s_kubeadm_init_config:
          # https://pkg.go.dev/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2
          - apiVersion: kubeadm.k8s.io/v1beta2
            kind: InitConfiguration
            nodeRegistration:
              criSocket: /run/containerd/containerd.sock
            localAPIEndpoint:
              advertiseAddress: "{{ ansible_all_ipv4_addresses|ipaddr(k8s_ip_range_controlnode)|first }}"
          - apiVersion: kubeadm.k8s.io/v1beta2
            kind: ClusterConfiguration
            clusterName: "{{ k8s_cluster_name }}"
            kubernetesVersion: "v{{ k8s_version }}"
            controlPlaneEndpoint: "{{ k8s_private_control_plane_endpoint }}"
            apiServer:
              certSANs: "{{ [k8s_private_control_plane_endpoint.split(':')|first] + k8s_apiserver_cert_extra_sans }}"
              extraArgs:
                apiserver-count: "{{ k8s_controlnodes|length }}"
            networking:
              serviceSubnet: "{{ k8s_ip_range_service }}"
              podSubnet: "{{ k8s_ip_range_pod }}"
            etcd:
              local:
                extraArgs:
                  listen-client-urls: "http://{{ ansible_all_ipv4_addresses|ipaddr(k8s_ip_range_controlnode)|first }}:2379"
          - apiVersion: kubelet.config.k8s.io/v1beta1
            kind: KubeletConfiguration
            cgroupDriver: systemd
      args:
        creates: /etc/kubernetes/admin.conf
        stdin: |
          {% for config in k8s_kubeadm_init_config %}
          {{ config|to_nice_yaml(indent=2)|trim }}
          {% if not loop.last %}
          ---
          {% endif %}
          {% endfor %}
      command: >
        kubeadm init --config=/dev/stdin

    - name: Configure kube tools
      args:
        creates: "{{ ansible_env.HOME }}/.kube/config"
      shell: |
        set -e
        mkdir -p ~/.kube
        cp /etc/kubernetes/admin.conf ~/.kube/config
